name: Build Executables

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install build cx_freeze

    - name: Print NumPy Info (Debug)
      run: |
        python -c "import numpy; print('NumPy version:', numpy.__version__)"
        python -c "import numpy; print('NumPy location:', numpy.__file__)"
        python -c "import os, numpy; np_core = os.path.join(os.path.dirname(numpy.__file__), 'core'); print('NumPy core exists:', os.path.exists(np_core)); print('NumPy core files:', os.listdir(np_core) if os.path.exists(np_core) else 'N/A')"
      shell: bash

    - name: Build executable
      run: |
        python -m build --wheel --no-isolation
        pip install dist/*.whl
      shell: bash

    - name: Build Windows Executable
      if: matrix.os == 'windows-latest'
      run: |
        # Create build directory
        mkdir -p build/exe.win-amd64-3.10/numpy/core

        # Find NumPy core directory
        python -c "import os, numpy; np_core = os.path.join(os.path.dirname(numpy.__file__), 'core'); print(f'NUMPY_CORE={np_core}')" > np_path.txt
        NUMPY_CORE=$(cat np_path.txt | grep NUMPY_CORE | cut -d'=' -f2)

        # Run cx_Freeze
        python -m cx_Freeze src/gui/gui_5_0.py --target-dir dist/executable

        # Download VC++ Redistributable
        curl -L -o dist/executable/vcredist_x64.exe https://aka.ms/vs/17/release/vc_redist.x64.exe

        # Create installer batch file
        echo '@echo off' > dist/executable/install.bat
        echo 'echo Installing Visual C++ Redistributable...' >> dist/executable/install.bat
        echo 'start /wait vcredist_x64.exe /quiet /norestart' >> dist/executable/install.bat
        echo 'echo Installation complete!' >> dist/executable/install.bat

        # Copy NumPy core DLLs to ensure they're included
        cp "$NUMPY_CORE"/*.pyd dist/executable/lib/numpy/core/ || echo "Failed to copy NumPy PYD files"
        cp "$NUMPY_CORE"/*.dll dist/executable/lib/numpy/core/ || echo "Failed to copy NumPy DLL files"
      shell: bash

    - name: Build macOS/Linux Executable
      if: matrix.os != 'windows-latest'
      run: |
        python -m cx_Freeze src/gui/gui_5_0.py --target-dir dist/executable --target-name gui_5_0
      shell: bash

    - name: Copy additional files
      run: |
        mkdir -p dist/executable/src/preprocessing
        mkdir -p dist/executable/src/model
        cp src/preprocessing/training_columns.csv dist/executable/src/preprocessing/
        cp src/preprocessing/scaler.joblib dist/executable/src/preprocessing/
        cp src/model/lenn1.3.keras dist/executable/src/model/
      shell: bash

    - name: Create README instructions
      if: matrix.os == 'windows-latest'
      run: |
        echo "# Loan Eligibility Checker" > dist/executable/README.md
        echo "" >> dist/executable/README.md
        echo "## Installation Instructions" >> dist/executable/README.md
        echo "" >> dist/executable/README.md
        echo "1. Run \`install.bat\` to install the Visual C++ Redistributable (if not already installed)" >> dist/executable/README.md
        echo "2. Run \`LoanEligibilityChecker.exe\` to start the application" >> dist/executable/README.md
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: LoanChecker-${{ matrix.os }}
        path: dist/executable/*
        if-no-files-found: error
